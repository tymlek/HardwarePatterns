; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\Tim\School\Level 6\CI6300 Individual Project\Code\Patterns\HardwarePatterns\HardwareProxyPatternCpp\test.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	??0MotorProxy@@QAE@XZ				; MotorProxy::MotorProxy
PUBLIC	??1MotorProxy@@QAE@XZ				; MotorProxy::~MotorProxy
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	?configure@MotorProxy@@QAEXIPAI@Z:PROC		; MotorProxy::configure
EXTRN	?initialize@MotorProxy@@QAEXXZ:PROC		; MotorProxy::initialize
EXTRN	?getMotorDirection@MotorProxy@@QAE?AW4DirectionType@@XZ:PROC ; MotorProxy::getMotorDirection
EXTRN	?getMotorSpeed@MotorProxy@@QAEIXZ:PROC		; MotorProxy::getMotorSpeed
EXTRN	?getMotorState@MotorProxy@@QAEIXZ:PROC		; MotorProxy::getMotorState
EXTRN	?setMotorSpeed@MotorProxy@@QAEXW4DirectionType@@I@Z:PROC ; MotorProxy::setMotorSpeed
EXTRN	?disable@MotorProxy@@QAEXXZ:PROC		; MotorProxy::disable
EXTRN	?enable@MotorProxy@@QAEXXZ:PROC			; MotorProxy::enable
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@ DB 'Motor error st'
	DB	'ate: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@ DB 'Motor speed: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@ DB 'Motor direction: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@ DB 'Motor address: 0x'
	DB	'%X', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
__ehfuncinfo$_main DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tim\school\level 6\ci6300 individual project\code\patterns\hardwarepatterns\hardwareproxypatterncpp\test.cpp
;	COMDAT _main
_TEXT	SEGMENT
$T2 = -240						; size = 4
_hwAddr$ = -36						; size = 4
_myMotor$ = -24						; size = 8
__$EHRec$ = -12						; size = 12
_main	PROC						; COMDAT

; 5    : int main(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 6    : 	MotorProxy myMotor;

  0003d	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00040	e8 00 00 00 00	 call	 ??0MotorProxy@@QAE@XZ	; MotorProxy::MotorProxy
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 7    : 	std::uint32_t hwAddr;
; 8    : 
; 9    : 	myMotor.configure(0, &hwAddr);

  0004c	8d 45 dc	 lea	 eax, DWORD PTR _hwAddr$[ebp]
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00055	e8 00 00 00 00	 call	 ?configure@MotorProxy@@QAEXIPAI@Z ; MotorProxy::configure

; 10   : 	myMotor.initialize();

  0005a	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  0005d	e8 00 00 00 00	 call	 ?initialize@MotorProxy@@QAEXXZ ; MotorProxy::initialize

; 11   : 
; 12   : 	myMotor.setMotorSpeed(FORWARD, 10);

  00062	6a 0a		 push	 10			; 0000000aH
  00064	6a 01		 push	 1
  00066	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00069	e8 00 00 00 00	 call	 ?setMotorSpeed@MotorProxy@@QAEXW4DirectionType@@I@Z ; MotorProxy::setMotorSpeed

; 13   : 
; 14   : 	printf("Motor address: 0x%X\n", &hwAddr);

  0006e	8d 45 dc	 lea	 eax, DWORD PTR _hwAddr$[ebp]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@
  00077	e8 00 00 00 00	 call	 _printf
  0007c	83 c4 08	 add	 esp, 8

; 15   : 	printf("Motor direction: %d\n", myMotor.getMotorDirection());

  0007f	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00082	e8 00 00 00 00	 call	 ?getMotorDirection@MotorProxy@@QAE?AW4DirectionType@@XZ ; MotorProxy::getMotorDirection
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@
  0008d	e8 00 00 00 00	 call	 _printf
  00092	83 c4 08	 add	 esp, 8

; 16   : 	printf("Motor speed: %d\n", myMotor.getMotorSpeed());

  00095	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00098	e8 00 00 00 00	 call	 ?getMotorSpeed@MotorProxy@@QAEIXZ ; MotorProxy::getMotorSpeed
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@
  000a3	e8 00 00 00 00	 call	 _printf
  000a8	83 c4 08	 add	 esp, 8

; 17   : 	printf("Motor error state: %d\n", myMotor.getMotorState());

  000ab	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  000ae	e8 00 00 00 00	 call	 ?getMotorState@MotorProxy@@QAEIXZ ; MotorProxy::getMotorState
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@
  000b9	e8 00 00 00 00	 call	 _printf
  000be	83 c4 08	 add	 esp, 8

; 18   : 
; 19   : 	myMotor.disable();

  000c1	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  000c4	e8 00 00 00 00	 call	 ?disable@MotorProxy@@QAEXXZ ; MotorProxy::disable

; 20   : 
; 21   : 	myMotor.enable();

  000c9	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  000cc	e8 00 00 00 00	 call	 ?enable@MotorProxy@@QAEXXZ ; MotorProxy::enable

; 22   : 
; 23   : 	return 0;

  000d1	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e2	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1MotorProxy@@QAE@XZ	; MotorProxy::~MotorProxy
  000ea	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 24   : }

  000f0	52		 push	 edx
  000f1	8b cd		 mov	 ecx, ebp
  000f3	50		 push	 eax
  000f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@main
  000fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ff	58		 pop	 eax
  00100	5a		 pop	 edx
  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN8@main:
  00120	02 00 00 00	 DD	 2
  00124	00 00 00 00	 DD	 $LN7@main
$LN7@main:
  00128	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0012c	08 00 00 00	 DD	 8
  00130	00 00 00 00	 DD	 $LN4@main
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	04 00 00 00	 DD	 4
  0013c	00 00 00 00	 DD	 $LN5@main
$LN5@main:
  00140	68		 DB	 104			; 00000068H
  00141	77		 DB	 119			; 00000077H
  00142	41		 DB	 65			; 00000041H
  00143	64		 DB	 100			; 00000064H
  00144	64		 DB	 100			; 00000064H
  00145	72		 DB	 114			; 00000072H
  00146	00		 DB	 0
$LN4@main:
  00147	6d		 DB	 109			; 0000006dH
  00148	79		 DB	 121			; 00000079H
  00149	4d		 DB	 77			; 0000004dH
  0014a	6f		 DB	 111			; 0000006fH
  0014b	74		 DB	 116			; 00000074H
  0014c	6f		 DB	 111			; 0000006fH
  0014d	72		 DB	 114			; 00000072H
  0014e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _myMotor$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1MotorProxy@@QAE@XZ	; MotorProxy::~MotorProxy
__ehhandler$_main:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tim\school\level 6\ci6300 individual project\code\patterns\hardwarepatterns\hardwareproxypatterncpp\motorproxy.h
;	COMDAT ??1MotorProxy@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1MotorProxy@@QAE@XZ PROC				; MotorProxy::~MotorProxy, COMDAT
; _this$ = ecx

; 16   : 	~MotorProxy() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 		
; 18   : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??1MotorProxy@@QAE@XZ ENDP				; MotorProxy::~MotorProxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tim\school\level 6\ci6300 individual project\code\patterns\hardwarepatterns\hardwareproxypatterncpp\motorproxy.h
;	COMDAT ??0MotorProxy@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0MotorProxy@@QAE@XZ PROC				; MotorProxy::MotorProxy, COMDAT
; _this$ = ecx

; 12   : 	MotorProxy() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 		motorAddr = nullptr;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 14   : 	}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0MotorProxy@@QAE@XZ ENDP				; MotorProxy::MotorProxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 952  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b f4		 mov	 esi, esp
  00035	6a 01		 push	 1
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0003d	83 c4 04	 add	 esp, 4
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 __vfprintf_l
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 957  :         __crt_va_end(_ArgList);

  00053	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 958  :         return _Result;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 959  :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 150  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 151  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 152  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 640  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	51		 push	 ecx
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	52		 push	 edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 642  :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
