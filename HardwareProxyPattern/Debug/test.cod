; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\Tim\School\Level 6\CI6300 Individual Project\Code\Patterns\HardwarePatterns\HardwareProxyPattern\test.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	?MotorProxy_accessMotorDirection@@YA?AW4DirectionType@@QAUMotorProxy@@@Z:PROC ; MotorProxy_accessMotorDirection
EXTRN	?MotorProxy_accessMotorSpeed@@YAIQAUMotorProxy@@@Z:PROC ; MotorProxy_accessMotorSpeed
EXTRN	?MotorProxy_accessMotorState@@YAIQAUMotorProxy@@@Z:PROC ; MotorProxy_accessMotorState
EXTRN	?MotorProxy_configure@@YAXQAUMotorProxy@@IPAI@Z:PROC ; MotorProxy_configure
EXTRN	?MotorProxy_initialize@@YAXQAUMotorProxy@@@Z:PROC ; MotorProxy_initialize
EXTRN	?MotorProxy_disable@@YAXQAUMotorProxy@@@Z:PROC	; MotorProxy_disable
EXTRN	?MotorProxy_enable@@YAXQAUMotorProxy@@@Z:PROC	; MotorProxy_enable
EXTRN	?MotorProxy_writeMotorSpeed@@YAXQAUMotorProxy@@W4DirectionType@@I@Z:PROC ; MotorProxy_writeMotorSpeed
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@ DB 'Motor error st'
	DB	'ate: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@ DB 'Motor speed: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@ DB 'Motor direction: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@ DB 'Motor address: 0x'
	DB	'%X', 0aH, 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tim\school\level 6\ci6300 individual project\code\patterns\hardwarepatterns\hardwareproxypattern\test.cpp
;	COMDAT _main
_TEXT	SEGMENT
_hwAddr$ = -36						; size = 4
_myMotor$ = -24						; size = 4
_motor$ = -12						; size = 8
_main	PROC						; COMDAT

; 5    : int main(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 6    : 	//MotorProxy* myMotor = MotorProxy_Create();
; 7    : 	MotorProxy motor;
; 8    : 	MotorProxy* myMotor = &motor;

  0001e	8d 45 f4	 lea	 eax, DWORD PTR _motor$[ebp]
  00021	89 45 e8	 mov	 DWORD PTR _myMotor$[ebp], eax

; 9    : 	unsigned int hwAddr;
; 10   : 
; 11   : 	MotorProxy_configure(myMotor, 0, &hwAddr);

  00024	8d 45 dc	 lea	 eax, DWORD PTR _hwAddr$[ebp]
  00027	50		 push	 eax
  00028	6a 00		 push	 0
  0002a	8b 4d e8	 mov	 ecx, DWORD PTR _myMotor$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ?MotorProxy_configure@@YAXQAUMotorProxy@@IPAI@Z ; MotorProxy_configure
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12   : 	MotorProxy_initialize(myMotor);

  00036	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?MotorProxy_initialize@@YAXQAUMotorProxy@@@Z ; MotorProxy_initialize
  0003f	83 c4 04	 add	 esp, 4

; 13   : 
; 14   : 	MotorProxy_writeMotorSpeed(myMotor, FORWARD, 10);

  00042	6a 0a		 push	 10			; 0000000aH
  00044	6a 01		 push	 1
  00046	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?MotorProxy_writeMotorSpeed@@YAXQAUMotorProxy@@W4DirectionType@@I@Z ; MotorProxy_writeMotorSpeed
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15   : 
; 16   : 	printf("Motor address: 0x%X\n", myMotor->motorAddr);

  00052	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	51		 push	 ecx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BCGNEEKA@Motor?5address?3?50x?$CFX?6?$AA@
  0005d	e8 00 00 00 00	 call	 _printf
  00062	83 c4 08	 add	 esp, 8

; 17   : 	printf("Motor direction: %d\n", MotorProxy_accessMotorDirection(myMotor));

  00065	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?MotorProxy_accessMotorDirection@@YA?AW4DirectionType@@QAUMotorProxy@@@Z ; MotorProxy_accessMotorDirection
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEIOKGMP@Motor?5direction?3?5?$CFd?6?$AA@
  00077	e8 00 00 00 00	 call	 _printf
  0007c	83 c4 08	 add	 esp, 8

; 18   : 	printf("Motor speed: %d\n", MotorProxy_accessMotorSpeed(myMotor));

  0007f	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?MotorProxy_accessMotorSpeed@@YAIQAUMotorProxy@@@Z ; MotorProxy_accessMotorSpeed
  00088	83 c4 04	 add	 esp, 4
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HMMBNICD@Motor?5speed?3?5?$CFd?6?$AA@
  00091	e8 00 00 00 00	 call	 _printf
  00096	83 c4 08	 add	 esp, 8

; 19   : 	printf("Motor error state: %d\n", MotorProxy_accessMotorState(myMotor));

  00099	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?MotorProxy_accessMotorState@@YAIQAUMotorProxy@@@Z ; MotorProxy_accessMotorState
  000a2	83 c4 04	 add	 esp, 4
  000a5	50		 push	 eax
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LIEPEKFM@Motor?5error?5state?3?5?$CFd?6?$AA@
  000ab	e8 00 00 00 00	 call	 _printf
  000b0	83 c4 08	 add	 esp, 8

; 20   : 
; 21   : 	MotorProxy_disable(myMotor);

  000b3	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?MotorProxy_disable@@YAXQAUMotorProxy@@@Z ; MotorProxy_disable
  000bc	83 c4 04	 add	 esp, 4

; 22   : 
; 23   : 	MotorProxy_enable(myMotor);

  000bf	8b 45 e8	 mov	 eax, DWORD PTR _myMotor$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?MotorProxy_enable@@YAXQAUMotorProxy@@@Z ; MotorProxy_enable
  000c8	83 c4 04	 add	 esp, 4

; 24   : 
; 25   : 	//MotorProxy_Destroy(myMotor);
; 26   : 
; 27   : 	return 0;

  000cb	33 c0		 xor	 eax, eax

; 28   : }

  000cd	52		 push	 edx
  000ce	8b cd		 mov	 ecx, ebp
  000d0	50		 push	 eax
  000d1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@main
  000d7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000dc	58		 pop	 eax
  000dd	5a		 pop	 edx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
  000f2	66 90		 npad	 2
$LN6@main:
  000f4	02 00 00 00	 DD	 2
  000f8	00 00 00 00	 DD	 $LN5@main
$LN5@main:
  000fc	f4 ff ff ff	 DD	 -12			; fffffff4H
  00100	08 00 00 00	 DD	 8
  00104	00 00 00 00	 DD	 $LN3@main
  00108	dc ff ff ff	 DD	 -36			; ffffffdcH
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN4@main
$LN4@main:
  00114	68		 DB	 104			; 00000068H
  00115	77		 DB	 119			; 00000077H
  00116	41		 DB	 65			; 00000041H
  00117	64		 DB	 100			; 00000064H
  00118	64		 DB	 100			; 00000064H
  00119	72		 DB	 114			; 00000072H
  0011a	00		 DB	 0
$LN3@main:
  0011b	6d		 DB	 109			; 0000006dH
  0011c	6f		 DB	 111			; 0000006fH
  0011d	74		 DB	 116			; 00000074H
  0011e	6f		 DB	 111			; 0000006fH
  0011f	72		 DB	 114			; 00000072H
  00120	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 952  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b f4		 mov	 esi, esp
  00035	6a 01		 push	 1
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0003d	83 c4 04	 add	 esp, 4
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 __vfprintf_l
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 957  :         __crt_va_end(_ArgList);

  00053	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 958  :         return _Result;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 959  :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 150  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 151  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 152  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 640  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	51		 push	 ecx
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	52		 push	 edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 642  :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
